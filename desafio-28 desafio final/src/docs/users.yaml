#User
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: ObjectId
          description: Id generada por mongo
        name:
          type: string
          description: Nombre completo del usuario
        last_name:
          type: string
          description: Apellido del usuario
        cart:
          type: Array
          description: Carritos del cliente o un carrito (Puedo pensar que pueden los carritos tener un estado y si el estado es que cambie y al momento de generar una orden, se crea otro carrito )
        email:
          type: string
          description: Correo del usuario, campo unico
        password:
          type: string
          description: Contraseña hasheada del usuario.
      example:
        id: ObjectId("assasasa2as1as1asas12")
        name: veronica
        last_name: soto
        email: correovero@gmail.com
        password: 1asadasdda
  requestBodies:
    nuevoUsuario:
      type: object
      properties:
        name:
          type: string
          description: Nombre completo del usuario
        email:
          type: string
          description: Correo del usuario, campo unico
        password:
          type: string
          description: Contraseña se hashea en el servidor
      example:
        name: veronica
        email: correovero@gmail.com
        last_name: forte
        password: 1234d
        age: 18
        phone: +569 9803 8545
        alias: veroBella
        adress: en el corazon del mundo
        avatar: debe ser cargado como imagen en postman o por el register

paths:
  /api/user/listar:
    get:
      summary: Obtiene todo los usuarios
      tags:
        - Users
      responses:
        "200":
          description: Los usuarios se obtubieron correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/user/create:
    post:
      summary: Crea nuevo usuario
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/nuevoUsuario'
      responses:
        "200":
          description: El usuario se agrego satisfactoriamente
  /api/user/login:
    post:
      tags:
        - Users
      summary: Logs user into the system
      description: ''
      operationId: login
      parameters:
        - name: email
          in: query
          description: The user email for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied